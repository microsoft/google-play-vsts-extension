trigger:
  branches:
    include:
    - master

parameters:
  - name: forceCodeSign
    type: boolean
    default: false
  - name: simulateCodeSigningError # Simulate a code signing error to ensure PublishArtifacts is skipped when CodeSigning fails
    type: boolean
    default: false

variables:
- name: CodeQL.Enabled
  value: true
- group: EPS.ESRPSigningProdAME # Mseng -> Library -> EsrpSigningProd
- name: shouldRunCodeSigning
  ${{ if eq(parameters.forceCodeSign, 'true') }}:
    value: true
  ${{ else }}:
    value: eq(variables['Build.SourceBranchName'], 'master')

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: 1ESPtTfsAgentBuildPoolSDL
    pool:
      name: 1ESPtTfsAgentBuildPool1
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
    - stage: BuildAndTest
      jobs:
        - job: BuildAndTestJob        
          displayName: Build and Test
          steps:
          - checkout: self
            clean: true
            fetchTags: false

          - task: UseNode@1
            displayName: Use Node
            inputs:
              version: '20.14.0'

          - task: NpmAuthenticate@0
            inputs:
              workingFile: .npmrc

          - task: Npm@1
            name: Npm_1
            displayName: npm install
            inputs:
              command: 'install'
              verbose: false

          - task: CmdLine@2
            displayName: Build
            inputs:
              script: node make.js build

          - task: CmdLine@2
            displayName: Run Tests
            inputs:
              script: node make.js test

          - task: CmdLine@2
            displayName: Create extension
            inputs:
              script: node make.js create

          - task: CmdLine@2
            displayName: Create test extension
            inputs:
              script: node make.js createtest

    - stage: CodeSigning
      condition: eq(variables['shouldRunCodeSigning'], 'true')
      dependsOn: BuildAndTest
      jobs:
      - job: CodeSigningJob
        displayName: ESRP CodeSigning
        condition: eq(variables['simulateCodeSigningError'], 'true')
        steps:
        - script: |
            echo "Simulated error in CodeSigning step."
            exit 1
          displayName: Simulate CodeSigning Error
        - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@5
          displayName: ESRP CodeSigning
          inputs:
            ConnectedServiceName: '$(Control.EsrpServiceConnectionName)'
            AppRegistrationClientId: '$(Control.AppRegistrationClientId)'
            AppRegistrationTenantId: '$(Control.AppRegistrationTenantId)'
            AuthAKVName: '$(Control.AuthAKVName)'
            AuthCertName: '$(Control.AuthCertName)'
            AuthSignCertName: '$(Control.AuthSignCertName)'
            FolderPath: $(System.DefaultWorkingDirectory)
            Pattern: '*.vsix'
            signConfigType: inlineSignParams
            inlineOperation: |-
              [
              {
                "KeyCode": "CP-233016",
                "OperationCode": "OPCSign",
                "ToolName": "sign",
                "ToolVersion": "1.0",
                "Parameters": {
                "FileDigest": "/fd SHA512"
                }
              },
              {
                "KeyCode": "CP-233016",
                "OperationCode": "OPCVerify",
                "ToolName": "sign",
                "ToolVersion": "1.0",
                "Parameters": {}
              }
              ]
            SessionTimeout: 30

    - stage: PublishArtifacts
      dependsOn:
        - BuildAndTest
        - CodeSigning
      condition: or( and(succeeded('BuildAndTest'), not(eq(variables['shouldRunCodeSigning'], 'true'))), succeeded('CodeSigning'))
      jobs:
      - job: PublishJob
        displayName: Publish Artifacts
        templateContext:
          outputs:
          - output: pipelineArtifact
            displayName: 'Publish Artifact: vsix'
            targetPath: '$(System.ArtifactsDirectory)'
            artifactName: vsix        
        steps:
        - task: CopyFiles@2
          name: CopyFiles_5
          displayName: 'Copy Files to: $(System.ArtifactsDirectory)'
          inputs:
            Contents: '*.vsix'
            TargetFolder: $(System.ArtifactsDirectory)

    - stage: TestPublishToMarketplace
      dependsOn:
        - PublishArtifacts
      condition: succeeded('PublishArtifacts')
      trigger: manual      
      jobs:
      - job: PublishMarketplateJob
        displayName: Test - Publish to Marketplace
        steps:
          - task: CmdLine@2
            displayName: Test - Publish to Marketplace
            inputs:
              script: node tfx extension publish --manifest-globs vsts-extension-google-play.json --share-with canarytest --token $PUBLISH_ACCESSTOKEN

